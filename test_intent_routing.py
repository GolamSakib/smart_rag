#!/usr/bin/env python3
"""
Test script to demonstrate intent-based routing functionality
"""

from services.intent_detector import intent_detector, IntentType
from services.chat_tools import chat_tools

def test_intent_detection():
    """Test intent detection with various user queries"""
    
    test_cases = [
        # Product search queries
        ("‡¶ú‡ßÅ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", False, IntentType.PRODUCT_SEARCH),
        ("‡¶Ü‡¶Æ‡¶ø ‡¶ú‡ßÅ‡¶§‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø", False, IntentType.PRODUCT_SEARCH),
        ("‡¶∏‡¶¨ ‡¶ú‡ßÅ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", False, IntentType.PRODUCT_SEARCH),
        
        # Price inquiries
        ("‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶§", False, IntentType.PRICE_INQUIRY),
        ("pp", False, IntentType.PRICE_INQUIRY),
        ("‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶ú‡¶æ‡¶®‡¶æ‡¶®", False, IntentType.PRICE_INQUIRY),
        
        # Order inquiries
        ("‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨", False, IntentType.ORDER_INQUIRY),
        ("‡¶ï‡¶ø‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á", False, IntentType.ORDER_INQUIRY),
        
        # Delivery inquiries
        ("‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ï‡¶§‡¶¶‡¶ø‡¶®‡ßá ‡¶π‡¶¨‡ßá", False, IntentType.DELIVERY_INQUIRY),
        ("‡¶ï‡¶ñ‡¶® ‡¶™‡¶æ‡¶¨", False, IntentType.DELIVERY_INQUIRY),
        
        # Return policy
        ("‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶™‡¶≤‡¶ø‡¶∏‡¶ø ‡¶ï‡¶ø", False, IntentType.RETURN_POLICY),
        
        # Size chart
        ("‡¶∏‡¶æ‡¶á‡¶ú ‡¶ö‡¶æ‡¶∞‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", False, IntentType.SIZE_CHART),
        
        # Greetings
        ("‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ", False, IntentType.GREETING),
        ("‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã", False, IntentType.GREETING),
        
        # Image requests
        ("‡¶õ‡¶¨‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", False, IntentType.IMAGE_REQUEST),
        
        # Bargaining
        ("‡¶¶‡¶æ‡¶Æ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º", False, IntentType.BARGAINING),
        
        # General chat
        ("‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®", False, IntentType.GENERAL_CHAT),
    ]
    
    print("=== Testing Intent Detection ===")
    print()
    
    for query, has_images, expected_intent in test_cases:
        detected_intent, confidence = intent_detector.detect_intent(query, has_images)
        
        status = "‚úÖ" if detected_intent == expected_intent else "‚ùå"
        print(f"{status} Query: '{query}'")
        print(f"   Expected: {expected_intent.value}")
        print(f"   Detected: {detected_intent.value} (confidence: {confidence:.2f})")
        print()

def test_k_value_selection():
    """Test k value selection based on intent and query"""
    
    test_cases = [
        ("‡¶∏‡¶¨ ‡¶ú‡ßÅ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", IntentType.PRODUCT_SEARCH, 5),  # "all" keyword
        ("‡¶è‡¶ï‡¶ü‡¶ø ‡¶ú‡ßÅ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", IntentType.PRODUCT_SEARCH, 1),  # specific request
        ("‡¶ú‡ßÅ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", IntentType.PRODUCT_SEARCH, 3),  # default for product search
        ("‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶§", IntentType.PRICE_INQUIRY, 1),  # price inquiry
        ("‡¶∏‡¶¨ ‡¶™‡¶£‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", IntentType.GENERAL_CHAT, 5),  # "all" keyword in general chat
    ]
    
    print("=== Testing K Value Selection ===")
    print()
    
    for query, intent, expected_k in test_cases:
        k_value = chat_tools.get_k_value_for_intent(intent, query)
        
        status = "‚úÖ" if k_value == expected_k else "‚ùå"
        print(f"{status} Query: '{query}'")
        print(f"   Intent: {intent.value}")
        print(f"   Expected K: {expected_k}")
        print(f"   Actual K: {k_value}")
        print()

def test_intent_routing():
    """Test intent-based routing"""
    
    print("=== Testing Intent-Based Routing ===")
    print()
    
    # Test cases for different intents
    test_cases = [
        ("‡¶ú‡ßÅ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®", IntentType.PRODUCT_SEARCH, True),  # Should search products
        ("‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶§", IntentType.PRICE_INQUIRY, True),  # Should search products
        ("‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ï‡¶§‡¶¶‡¶ø‡¶®‡ßá", IntentType.DELIVERY_INQUIRY, False),  # Should not search products
        ("‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ", IntentType.GREETING, False),  # Should not search products
        ("‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶™‡¶≤‡¶ø‡¶∏‡¶ø ‡¶ï‡¶ø", IntentType.RETURN_POLICY, False),  # Should not search products
    ]
    
    for query, intent, should_search in test_cases:
        should_search_result = intent_detector.should_search_products(intent, 0.8)
        
        status = "‚úÖ" if should_search_result == should_search else "‚ùå"
        print(f"{status} Query: '{query}'")
        print(f"   Intent: {intent.value}")
        print(f"   Should search products: {should_search}")
        print(f"   Actually searches: {should_search_result}")
        print()

if __name__ == "__main__":
    print("üß™ Testing Intent-Based Routing System")
    print("=" * 50)
    print()
    
    test_intent_detection()
    test_k_value_selection()
    test_intent_routing()
    
    print("‚úÖ All tests completed!")
