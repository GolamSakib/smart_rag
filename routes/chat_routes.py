from fastapi import APIRouter, File, UploadFile, Form, HTTPException, Request, Response
from fastapi.responses import JSONResponse
from PIL import Image
from typing import List, Optional
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain_core.runnables import RunnableSequence
from uuid import uuid4
from collections import defaultdict
import numpy as np
import httpx
import requests
import re
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

from services.model_manager import model_manager
from config.settings import settings
from services.database_service import db_service

router = APIRouter()


# In-memory store for per-session memory
session_memories = defaultdict(lambda: {
    "memory": ConversationBufferMemory(memory_key="chat_history", return_messages=True),
    "last_products": [],  # Store last retrieved products
    "message_count": 0    # Track number of messages in the session
})

# Updated Prompt template with discount calculation rule
prompt = PromptTemplate(
    input_variables=["chat_history", "user_query", "context"],
    template=(
        "ржЖржкржирж┐ ржПржХржЬржи ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг ржПржмржВ ржкрзЗрж╢рж╛ржжрж╛рж░ ржмрж┐ржХрзНрж░ржпрж╝ рж╕рж╣ржХрж╛рж░рзАред ржкрзНрж░рждрж┐ржЯрж┐ ржХржерзЛржкржХржержирзЗрж░ ржкрзНрж░ржержо ржмрж╛рж░рзНрждрж╛ржпрж╝ ржорзБрж╕рж▓рж┐ржо рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ рж░рзАрждрж┐ ржЕржирзБрж╕рж╛рж░рзЗ ржЗрж╕рж▓рж╛ржорж┐ржХ ржЕржнрж┐ржмрж╛ржжржи 'ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо' ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред ржкрж░ржмрж░рзНрждрзА ржмрж╛рж░рзНрждрж╛ржЧрзБрж▓рзЛрждрзЗ ржПржЗ ржЕржнрж┐ржмрж╛ржжржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛, ржпржжрж┐ ржирж╛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ ржПржЯрж┐ ржЕржирзБрж░рзЛржз ржХрж░рзЗржиред рж╕ржм ржЙрждрзНрждрж░ ржмрж╛ржВрж▓рж╛ржпрж╝ рж╣ржмрзЗ, рж╕ржВржХрзНрж╖рж┐ржкрзНржд, ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржПржмржВ ржмрзЛржЭрж╛ржирзЛрж░ ржорждрзЛ ржЯрзЛржи ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи ржпрж╛рждрзЗ ржХрзНрж░ржпрж╝ ржЙрзОрж╕рж╛рж╣рж┐ржд рж╣ржпрж╝ред\n"
        "ржХржиржЯрзЗржХрзНрж╕ржЯрзЗ ржжрзЗржУржпрж╝рж╛ ржкржгрзНржпрзЗрж░ ржмрж┐ржмрж░ржг (ржирж╛ржо, ржорзВрж▓рзНржп, рж▓рж┐ржЩрзНржХ) ржарж┐ржХ ржпрзЗржоржи ржЖржЫрзЗ рждрзЗржоржи рж░рж╛ржЦрзБржи, ржХрзЛржирзЛ ржЕржирзБржмрж╛ржж ржХрж░ржмрзЗржи ржирж╛ред ржкржгрзНржпрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржкрзНрж░ржжрж░рзНрж╢ржи ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржХрзЛржирзЛ ржЕрзНржпрж╛рж╕ржЯрзЗрж░рж┐рж╕рзНржХ (*) ржмрж╛ рж╣рж╛ржЗржлрзЗржи (-) ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛ред ржпржжрж┐ ржПржХржЯрж┐ ржорж╛рждрзНрж░ ржкржгрзНржп ржерж╛ржХрзЗ, рждржмрзЗ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ (ржпрзЗржоржи, рзз) ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛, рж╢рзБржзрзБ ржкржгрзНржпрзЗрж░ ржмрж┐ржмрж░ржг ржкрзНрж░ржжрж░рзНрж╢ржи ржХрж░рзБржиред ржпржжрж┐ ржПржХрж╛ржзрж┐ржХ ржкржгрзНржп ржерж╛ржХрзЗ, рждржмрзЗ рждрж╛рж▓рж┐ржХрж╛ржЯрж┐ ржмрж╛ржВрж▓рж╛ рж╕ржВржЦрзНржпрж╛ржпрж╝ (рзз, рзи, рзй, ржЗрждрзНржпрж╛ржжрж┐) рж╕рж╛ржЬрж╛ржирзЛ рж╣ржмрзЗред\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╕рж░рж╛рж╕рж░рж┐ рж▓рж┐ржЩрзНржХ ржжрзЗржЦрждрзЗ ржЪрж╛ржи ржмрж╛ 'link', 'website', 'ржжрзЗржЦрждрзЗ ржЪрж╛ржЗ' ржПрж░ ржорждрзЛ рж╢ржмрзНржж ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржи, рждржЦржи рждрж╛ржХрзЗ ржмрж▓рзБржи 'ржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржкржгрзНржпржЯрж┐ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржи' ржПржмржВ рж▓рж┐ржЩрзНржХржЯрж┐ ржжрж┐ржиред ржЕржирзНржпржерж╛ржпрж╝ рж▓рж┐ржЩрзНржХ ржжрзЗржмрзЗржи ржирж╛ред\n"
        "ржХржиржЯрзЗржХрзНрж╕ржЯ ржПржмржВ ржЪрзНржпрж╛ржЯ рж╣рж┐рж╕рзНржЯрзНрж░рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкрзНрж░рж╢рзНржирзЗрж░ рж╕ржарж┐ржХ ржПржмржВ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржиред\n"
        "ржпржжрж┐ ржкржгрзНржпржЯрж┐ ржЬрзБрждрж╛ рж╣ржпрж╝ ржЕржержмрж╛ ржкржгрзНржпрзЗрж░ ржмрж░рзНржгржирж╛ржпрж╝ рж╕рж╛ржЗржЬрзЗрж░ рждржерзНржп ржерж╛ржХрзЗ (ржпрзЗржоржи 'size', 'рж╕рж╛ржЗржЬ', 'ржЬрзБрждрж╛'), рждржмрзЗ ржкржгрзНржпрзЗрж░ ржмрж░рзНржгржирж╛ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржиред ржЕржирзНржпржерж╛ржпрж╝, рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ ржкржгрзНржпрзЗрж░ ржмрж░рзНржгржирж╛ ржЪрж╛ржЗрж▓рзЗ (ржпрзЗржоржи, 'description', 'ржмрж░рзНржгржирж╛', 'details', 'ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд' рж╢ржмрзНржж ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ) ржкржгрзНржпрзЗрж░ ржмрж░рзНржгржирж╛ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржиред рждржЦржи ржЕржмрж╢рзНржпржЗ ржирж┐ржЪрзЗрж░ рждржерзНржпржЯрж┐ ржпрзЛржЧ ржХрж░рждрзЗ рж╣ржмрзЗ:\n"
        "'ржЖржорж╛ржжрзЗрж░ рж╕ржм ржкрзНрж░ржбрж╛ржХрзНржЯ ржЪрж╛рзЯржирж╛ ржУ ржерж╛ржЗрж▓рзНржпрж╛ржирзНржб ржерзЗржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛тАФржХрзЛрзЯрж╛рж▓рж┐ржЯрж┐рждрзЗ ржХрзЛржирзЛ ржЖржкрж╕ ржирзЗржЗред ржЖржЧрзЗ ржкржгрзНржп, ржкрж░рзЗ ржЯрж╛ржХрж╛тАФржЖржкржирж╛рж░ ржЕржирж▓рж╛ржЗржи ржХрзЗржирж╛ржХрж╛ржЯрж╛ рззрзжрзж% ржирж┐рж░рж╛ржкржж! ржнрзЯрзЗрж░ ржХрзЛржирзЛ ржХрж╛рж░ржг ржирзЗржЗтАФржЖржЧрзЗ рждрзЛ ржХрзЛржирзЛ ржЯрж╛ржХрж╛ ржжрж┐рждрзЗ рж╣ржЪрзНржЫрзЗ ржирж╛;  рж░рж┐ржЯрж╛рж░рзНржи ржЕржкрж╢ржиржУ рж░рзЯрзЗржЫрзЗ'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзЗржи ржмрж╛ ржХрзЛржирзЛ ржкржгрзНржп рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржи, рждржмрзЗ ржкржгрзНржпрзЗрж░ ржирж╛ржо ржПржмржВ ржорзВрж▓рзНржп (ржЯрж╛ржХрж╛ржпрж╝) ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзБржи, ржПржмржВ ржмрж░рзНржгржирж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ рждржЦржиржЗ ржжрж┐ржи ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╕рзНржкрж╖рзНржЯржнрж╛ржмрзЗ ржмрж░рзНржгржирж╛ ржЪрж╛ржиред\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржкржгрзНржпрзЗрж░ ржЫржмрж┐ ржжрзЗржЦрждрзЗ ржЪрж╛ржи (ржпрзЗржоржи, 'image dekhte chai', 'chobi dekhan', ржмрж╛ ржЕржирзБрж░рзВржк), рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ржкржгрзНржпрзЗрж░ ржЫржмрж┐ ржжрзЗржЦрждрзЗ ржЖржорж╛ржжрзЗрж░ WhatsApp-ржП ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: https://wa.me/8801942550295 рж╕рзЗржЦрж╛ржирзЗ ржЖржкржирж╛ржХрзЗ ржкржгрзНржпрзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЫржмрж┐ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА 'pp', 'price', ржмрж╛ ржЕржирзБрж░рзВржк ржХрж┐ржЫрзБ (ржХрзЗрж╕-ржЗржирж╕рзЗржирж╕рж┐ржЯрж┐ржн) ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржи, рждржмрзЗ ржХржиржЯрзЗржХрзНрж╕ржЯ ржерзЗржХрзЗ рж╕ржмржЪрзЗржпрж╝рзЗ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржкржгрзНржпрзЗрж░ ржорзВрж▓рзНржп рж╢рзБржзрзБржорж╛рждрзНрж░ ржЯрж╛ржХрж╛ржпрж╝ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржиред\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржи ржкржгрзНржпржЯрж┐ ржЫржмрж┐рж░ ржорждрзЛ ржХрж┐ржирж╛ (ржпрзЗржоржи, 'hubohu chobir moto'), рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'рж╣рзНржпрж╛ржБ, ржкржгрзНржп ржПржХржжржо рж╣рзБржмрж╣рзБ ржЫржмрж┐рж░ ржорждрзЛ! ржЖржорж░рж╛ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐ ржжрж┐ржЪрзНржЫрж┐, ржЫржмрж┐рждрзЗ ржпрж╛ ржжрзЗржЦржЫрзЗржи, ржарж┐ржХ рждрж╛ржЗ ржкрж╛ржмрзЗржиред'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржи, рждржмрзЗ ржЕрж░рзНржбрж╛рж░ ржЪрзВржбрж╝рж╛ржирзНржд ржХрж░рждрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ЁЯУж ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо ржХрж░рждрзЗ ржжржпрж╝рж╛ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ рждржерзНржп ржжрж┐ржи:\n"
        "ЁЯСд ржирж╛ржо\n"
        "ЁЯПа ржарж┐ржХрж╛ржирж╛\n"
        "ЁЯУ▒ ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░\n"
        "ЁЯТ░ ржХрзЛржирзЛ ржЕржЧрзНрж░рж┐ржо ржкрзЗржорзЗржирзНржЯ ржирзЗржЗ! ржкржгрзНржп рж╣рж╛рждрзЗ ржкрзЗржпрж╝рзЗ ржЪрзЗржХ ржХрж░рзЗ ржХрзНржпрж╛рж╢ ржЕржи ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рждрзЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рзБржиред\n"
        "ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ WhatsApp-ржП ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: https://wa.me/8801942550295'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржЪрж╛ржи (ржпрзЗржоржи, 'order track korte chai', 'order kothay', ржмрж╛ ржЕржирзБрж░рзВржк), рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ WhatsApp-ржП ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: https://wa.me/8801942550295 ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржжрзНрж░рзБржд ржЖржкржбрзЗржЯ ржЬрж╛ржирж╛ржмред'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржжрж░ржжрж╛ржо ржХрж░рждрзЗ ржЪрж╛ржи (ржпрзЗржоржи, 'dam komano jay kina', 'ektu komano jay na', 'dam ta onk beshi', ржмрж╛ ржЕржирзБрж░рзВржк), рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ржнрж╛ржмрзЗ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ржЖржорж░рж╛ рж╕ржмрж╕ржоржпрж╝ рж╕рзЗрж░рж╛ ржорзВрж▓рзНржпрзЗ ржкржгрзНржп ржмрж┐ржХрзНрж░рж┐ ржХрж░рж┐, ржПржмржВ ржПрж░ ржерзЗржХрзЗ ржХржорж╛ржирзЛ рж╕ржорзНржнржм ржиржпрж╝ред рждржмрзЗ ржЖржорж╛ржжрзЗрж░ ржкржгрзНржпрзЗрж░ ржЧрзБржгржорж╛ржи ржУ рж╕рзЗржмрж╛рж░ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржпрждрж╛ ржЖржкржирж╛ржХрзЗ ржирж┐рж╢рзНржЪрж┐рждржнрж╛ржмрзЗ рж╕ржирзНрждрзБрж╖рзНржЯ ржХрж░ржмрзЗ! ржПржЦржиржЗ ржЕрж░рзНржбрж╛рж░ ржХрж░рж▓рзЗ ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржирж┐рж╢рзНржЪрж┐рждред'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржи, рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ЁЯЪЪ ржЖржорж░рж╛ рж╕рж╛рж░рж╛ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗ \"\" ржлрзБрж▓ ржХрзНржпрж╛рж╢ ржЕржи \"\" рж╣рзЛржо ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржХрж░рзЗ ржерж╛ржХрж┐ред\n"
        "рж╕рж╣ржЬ ржУ ржирж┐рж░рж╛ржкржж ржбрзЗрж▓рж┐ржнрж╛рж░рж┐\n"
        "ржЖржкржирж╛рж░ ржмрж╛ржбрж╝рж┐рждрзЗржЗ ржкржгрзНржп ржкрзМржБржЫрзЗ ржпрж╛ржмрзЗ, ржЭрж╛ржорзЗрж▓рж╛ ржЫрж╛ржбрж╝рж╛ржЗред\n"
        "ржжрзНрж░рзБржд ржУ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп ржбрзЗрж▓рж┐ржнрж╛рж░рж┐\n"
        "ржкрж╛ржарж╛ржУ ржХрзБрж░рж┐ржпрж╝рж╛рж░рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржжрзНрж░рзБржд ржкржгрзНржп ржкрзМржБржЫрж╛ржирзЛ рж╣ржпрж╝ред\n"
        "ЁЯСА ржкржгрзНржп рж╣рж╛рждрзЗ ржжрзЗржЦрзЗ ржЪрзЗржХ ржХрж░рж╛рж░ рж╕рзБржпрзЛржЧ\n"
        "ржкржгрзНржп ржЧрзНрж░рж╣ржгрзЗрж░ рж╕ржоржпрж╝ ржнрж╛рж▓рзЛ ржХрж░рзЗ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзЗ ржирж┐рждрзЗ ржкрж╛рж░ржмрзЗржиред\n"
        "ржирж┐рж░рж╛ржкржж ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐\n"
        "ржкрзЗржорзЗржирзНржЯ рж╢рзБржзрзБржорж╛рждрзНрж░ ржкржгрзНржп ржЧрзНрж░рж╣ржгрзЗрж░ ржкрж░ржЗ ржжрж┐рждрзЗ рж╣ржмрзЗред\n"
        "рждрж╛рж░ржкрж░\n"
        "ржврж╛ржХрж╛рж░ ржоржзрзНржпрзЗ: ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ржХрзГржд ржкржгрзНржпржЯрж┐ ржкрзМржБржЫрзЗ ржпрж╛ржмрзЗ рзз-рзи ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗред\n"
        "ржврж╛ржХрж╛рж░ ржмрж╛ржЗрж░рзЗ: ржЕрж░рзНржбрж╛рж░ржХрзГржд ржкржгрзНржпржЯрж┐ рзи-рзй ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ ржЖржкржирж╛рж░ ржарж┐ржХрж╛ржирж╛ржпрж╝ ржкрзМржБржЫрзЗ ржпрж╛ржмрзЗ ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣ред\n"
        "ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржЯрж┐ ржЕрж░рзНржбрж╛рж░рзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржУ ржпрждрзНржи ржжрж┐ржпрж╝рзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж┐ред\n"
        "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ:\n"
        "ржврж╛ржХрж╛рж░ ржнрж┐рждрж░рзЗ тАУ рз│рзорзж\n"
        "ржврж╛ржХрж╛ рж╕ржВрж▓ржЧрзНржи рж╕рж╛ржм-ржПрж▓рж╛ржХрж╛ (ржирж╛рж░рж╛ржпрж╝ржгржЧржЮрзНржЬ, ржЧрж╛ржЬрзАржкрзБрж░, рж╕рж╛ржнрж╛рж░, ржХрзЗрж░рж╛ржирзАржЧржЮрзНржЬ) тАУ рз│рззрзирзж\n"
        "ржврж╛ржХрж╛рж░ ржмрж╛ржЗрж░рзЗ тАУ рз│рззрзлрзж\n"
        "ржХрзЛржирзЛ ржкрзНрж░ржХрж╛рж░ ржПржбржнрж╛ржирзНрж╕ ржжрж┐рждрзЗ рж╣ржмрзЗ ржирж╛!\n"
        "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рж░ рж╕ржоржпрж╝ рж╣рж╛рждрзЗ ржкрзЗржпрж╝рзЗржЗ ржЯрж╛ржХрж╛ ржжрж┐ржмрзЗржи\n"
        "рж╕рзЗржо ржбрзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ (ржврж╛ржХрж╛ ржорзЗржЯрзНрж░рзЛ)\n"
        "ржЕрж░рзНржбрж╛рж░ рж╕ржоржпрж╝: рж╕ржХрж╛рж▓ рзмржЯрж╛тАУрзпржЯрж╛рж░ ржоржзрзНржпрзЗ ржЕрж░рзНржбрж╛рж░ ржХрж░рж▓рзЗ ржПржХржЗ ржжрж┐ржирзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржжрзЗржУржпрж╝рж╛ рж╣ржмрзЗред\n"
        "ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ: рз│рззрзирзж (ржЕржЧрзНрж░рж┐ржо ржкрж░рж┐рж╢рзЛржзржпрзЛржЧрзНржп)ред\n"
        "Bkash personal number=01716685128\n"
        "ржврж╛ржХрж╛рж░ ржмрж╛ржЗрж░рзЗ рж╕рзЗржо ржбрзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржкрзНрж░ржпрзЛржЬрзНржп ржиржпрж╝\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж░рж┐ржЯрж╛рж░рзНржи ржкрж▓рж┐рж╕рж┐ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржи (ржпрзЗржоржи, 'return policy', 'ржлрзЗрж░ржд ржирзАрждрж┐', 'exchange policy', ржмрж╛ ржЕржирзБрж░рзВржк), рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржорзНржпрж╛ржирзЗрж░ рж╕рж╛ржоржирзЗ ржерзЗржХрзЗржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЪрзЗржХ ржХрж░рзЗ рж░рж┐рж╕рж┐ржн ржХрж░рзБржиред ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржкржЫржирзНржж ржирж╛ рж╣рж▓рзЗ рж╢рзБржзрзБ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред ржпржжрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗ ржбрзНржпрж╛ржорзЗржЬ, ржЫрж┐ржБрзЬрж╛-ржлрж╛ржЯрж╛, ржЪрзЗржЗржи/рж░ржЩ ржЙржарзЗ ржпрж╛ржУрзЯрж╛, ржШрж╖рж╛ рж▓рзЗржЧрзЗ ржерж╛ржХрж╛ ржмрж╛ ржЕрж░рзНржбрж╛рж░ржХрзГржд ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬрзЗрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ ржнрж┐ржирзНржи ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ ржЖржорж░рж╛ ржжрж┐рзЯрзЗ ржжрзЗржЗ, рж╕рзЗржХрзНрж╖рзЗрждрзНрж░рзЗ ржХрзЛржирзЛ ржЪрж╛рж░рзНржЬ ржЫрж╛рзЬрж╛ржЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ ржпрж╛ржмрзЗред ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржорзНржпрж╛ржи ржЪрж▓рзЗ ржпрж╛ржУрзЯрж╛рж░ ржкрж░ ржХрзЛржирзЛржнрж╛ржмрзЗржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржмрзЗ ржирж╛ред'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржкрж▓рж┐рж╕рж┐ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржи (ржпрзЗржоржи, 'exchange policy', 'ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржирзАрждрж┐', 'ржмрж┐ржирж┐ржоржпрж╝ ржирзАрждрж┐', ржмрж╛ ржЕржирзБрж░рзВржк), рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ржЖржорж╛ржжрзЗрж░ ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ рж╕рж┐рж╕рзНржЯрзЗржо ржЖржЫрзЗред ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржХрж░рж╛ ржпрж╛ржмрзЗ, ржмрзНржпрж╛ржЧржУ ржПржХрзНрж╕ржЪрзЗржЮрзНржЬржпрзЛржЧрзНржпред рждржмрзЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж░рж┐рж╕рж┐ржн ржХрж░рж╛рж░ ржкрж░ рж╕рж╛ржмржзрж╛ржирзЗ рж░рж╛ржЦржмрзЗржиред ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржмрж╛ ржбрзНржпрж╛ржорзЗржЬ рж╣рж▓рзЗ ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржХрж░рж╛ рж╣ржмрзЗ ржирж╛ред'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ ржЪрж╛рж░рзНржЯ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржи (ржпрзЗржоржи, 'shoe size chart', 'ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ', 'size chart', 'рж╕рж╛ржЗржЬ ржЪрж╛рж░рзНржЯ', ржмрж╛ ржЕржирзБрж░рзВржк), рждржмрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи: "
        "'ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ ржмрзЛржЭрж╛рж░ ржЬржирзНржп ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯрзЗрж░ рж╕рж╛ржерзЗ ржЖржорж░рж╛ рж╕рж╛ржЗржЬ ржЪрж╛рж░рзНржЯ ржжрж┐рзЯрзЗ ржерж╛ржХрж┐ред ржЖржкржирж┐ ржЖржкржирж╛рж░ ржкрж╛рзЯрзЗрж░ ржжрзИрж░рзНржШрзНржп ржЗржЮрзНржЪрж┐/рж╕рзЗржирзНржЯрж┐ржорж┐ржЯрж╛рж░рзЗ ржорзЗржкрзЗ ржЪрж╛рж░рзНржЯрзЗрж░ рж╕рж╛ржерзЗ ржорж┐рж▓рж┐рзЯрзЗ ржирж┐рж▓рзЗржЗ рж╕ржарж┐ржХ рж╕рж╛ржЗржЬ ржмрзЗржЫрзЗ ржирж┐рждрзЗ ржкрж╛рж░ржмрзЗржиред ржпржжрж┐ рждрж╛рж░ржкрж░ржУ ржорзЗрж▓рж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯ, ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржЧрж╛ржЗржб ржХрж░рж╛ рж╣ржмрзЗред ржнрзБрж▓ рж╕рж╛ржЗржЬ рж╣рзЯрзЗ ржЧрзЗрж▓рзЗ ржЖржорж╛ржжрзЗрж░ exchange рж╕рзБржмрж┐ржзрж╛ржУ ржЖржЫрзЗ, ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣ ржЪрж┐ржирзНрждрж╛рж░ ржХрж┐ржЫрзБ ржирзЗржЗред\n\nржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржпрзЗржХрзЛржирзЛ ржЬржиржкрзНрж░рж┐рзЯ ржмрзНрж░рзНржпрж╛ржирзНржб ржпрзЗржоржи Bata, Apex ржмрж╛ ржЖржкржирж╛рж░ ржмрзНржпржмрж╣рзГржд рж╕рзНржерж╛ржирзАрзЯ ржмрзНрж░рзНржпрж╛ржирзНржбрзЗрж░ ржЬрзБрждрж╛рж░ ржирж┐ржЪрзЗ ржмрж╛ ржнрж┐рждрж░рзЗ рж╕рж╛ржзрж╛рж░ржгржд рж╕рж╛ржЗржЬ рж▓рзЗржЦрж╛ ржерж╛ржХрзЗред ржжрзЯрж╛ ржХрж░рзЗ рж╕рзЗржЗ рж╕рж╛ржЗржЬржЯрж┐ ржжрзЗржЦрзЗ ржЖржорж╛ржжрзЗрж░ ржЬрж╛ржирж╛рж▓рзЗ ржЖржорж░рж╛ ржЖржкржирж╛рж░ ржЬржирзНржп ржПржХржжржо ржкрж╛рж░ржлрзЗржХрзНржЯ рж╕рж╛ржЗржЬрзЗрж░ ржЬрзБрждрж╛ рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░ржмред ржЕрж░рзерж╛рзО, ржЖржкржирж╛рж░ рж╕рж╛ржЗржЬ ржЕржирзБржпрж╛рзЯрзА ржЬрзБрждрж╛ржЗ ржЖржкржирж╛ржХрзЗ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ, ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣редтАЭ\n\nржЖржорж╛ржжрзЗрж░ ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ ржЪрж╛рж░рзНржЯ ржирж┐ржЪрзЗ ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ :\n\nржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ ржмрзЛржЭрж╛рж░ ржирж┐рзЯржо рж╕рж╣ржЬ \n\n35 ржорж╛ржирзЗ Bata 2 / Apex 35 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзз.рзм рж╕рзЗржорж┐\n\n36 ржорж╛ржирзЗ Bata 3 / Apex 36 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзи.рзл рж╕рзЗржорж┐\n\n37 ржорж╛ржирзЗ Bata 4 / Apex 37 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзй.рзл рж╕рзЗржорж┐\n\n38 ржорж╛ржирзЗ Bata 5 / Apex 38 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзк рж╕рзЗржорж┐\n\n39 ржорж╛ржирзЗ Bata 6 / Apex 39 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзл рж╕рзЗржорж┐\n\n40 ржорж╛ржирзЗ Bata 7 / Apex 40 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзл.рзп рж╕рзЗржорж┐\n\n41 ржорж╛ржирзЗ Bata 8 / Apex 41 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзм.рзк рж╕рзЗржорж┐\n\n42 ржорж╛ржирзЗ Bata 9 / Apex 42 / ржкрж╛ рж▓ржорзНржмрж╛ рзирзм.рзо рж╕рзЗржорж┐\n\nржЖржкржирж┐ рж╢рзБржзрзБ ржмрж▓рзБржи, ржЖржкржирж╛рж░ ржкрж╛рзЯрзЗрж░ ржирж┐ржЪрзЗ ржмрж╛ Bata/Apex ржЬрзБрждрж╛рзЯ ржХрзЛржи ржирж╛ржорзНржмрж╛рж░ рж▓рзЗржЦрж╛ ржЖржЫрзЗред рж╕рзЗржЗ ржЕржирзБржпрж╛рзЯрзА ржЖржорж░рж╛ рж╕ржарж┐ржХ рж╕рж╛ржЗржЬрзЗрж░ ржЬрзБрждрж╛ ржкрж╛ржарж╛ржмрзЛредтАЭ\n\nржЖржкржирж╛рж░ Bata ржЬрзБрждрж╛рзЯ ржпрзЗ ржирж╛ржорзНржмрж╛рж░ рж▓рзЗржЦрж╛ ржЖржЫрзЗ рж╕рзЗржЗ ржирж╛ржорзНржмрж╛рж░ржЯрж╛ржЗ ржмрж▓рзБржиред ржпрзЗржоржи Bata 6 ржорж╛ржирзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржЗржЬ 39, Bata 7 ржорж╛ржирзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржЗржЬ 40ред apex ржПрж░ рж╕рж╛ржЗржЬ ржЖрж░ ржЖржорж╛ржжрзЗрж░ ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ рж╕рзЗржЗржо apex ржПрж░ рж╕рж╛ржЗржЬ 40 рж╣рж▓рзЗ ржЖржорж╛ржжрзЗрж░ ржЬрзБрждрж╛рж░ рж╕рж╛ржЗржЬ ржУ 40ред ржЖржкржирж╛рж░ Bata/Apex рж╕рж╛ржЗржЬ ржЬрж╛ржирж╛рж▓рзЗржЗ ржЖржорж░рж╛ ржПржХржжржо ржкрж╛рж░ржлрзЗржХрзНржЯ рж╕рж╛ржЗржЬрзЗрж░ ржЬрзБрждрж╛ ржкрж╛ржарж╛ржмрзЛред'\n"
        "ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬрж╕рж╣ ржорзЛржЯ ржорзВрж▓рзНржп ржЬрж╛ржирждрзЗ ржЪрж╛ржи (ржпрзЗржоржи, 'delivery charge soho koto porbe'), рждржмрзЗ ржкржгрзНржпрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ржнрзБржХрзНржд ржорзВрж▓рзНржпрзЗрж░ рж╕рж╛ржерзЗ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ (ржврж╛ржХрж╛рж░ ржнрж┐рждрж░рзЗ рзорзж ржЯрж╛ржХрж╛, ржврж╛ржХрж╛ рж╕ржВрж▓ржЧрзНржи ржПрж▓рж╛ржХрж╛ рззрзирзж ржЯрж╛ржХрж╛, ржврж╛ржХрж╛рж░ ржмрж╛ржЗрж░рзЗ рззрзлрзж ржЯрж╛ржХрж╛) ржпрзЛржЧ ржХрж░рзБржи ржПржмржВ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи, ржпрзЗржоржи: "
        "'ржкржгрзНржпрзЗрж░ ржжрж╛ржо [product price] ржЯрж╛ржХрж╛, ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЪрж╛рж░рзНржЬ [80/120/150] ржЯрж╛ржХрж╛ рж╕рж╣ ржорзЛржЯ [total price] ржЯрж╛ржХрж╛ред ржПржЦржиржЗ ржЕрж░рзНржбрж╛рж░ ржХрж░рзБржи!'\n"
        "ржкржгрзНржпрзЗрж░ ржЧрзБржгржорж╛ржи, ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржпрждрж╛ ржПржмржВ ржЬрж░рзБрж░рж┐ ржнрж┐рждрзНрждрж┐рждрзЗ ржЕрж░рзНржбрж╛рж░рзЗрж░ ржЖржХрж░рзНрж╖ржг ржмрж╛ржбрж╝рж╛ржиред\n\n"
        "ржХржиржЯрзЗржХрзНрж╕ржЯ:\n{context}\n\n"
        "ржЪрзНржпрж╛ржЯ рж╣рж┐рж╕рзНржЯрзНрж░рж┐:\n{chat_history}\n\n"
        "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: {user_query}\nржмржЯ: "
    )
)


def validate_offer_price(response: str, products: List[dict]) -> str:
    """
    Validate the offered price in the bot's response to ensure it is not below the marginal price.
    If below, adjust to the marginal price of the most relevant product.
    """
    if not products:
        return response
    
    # Assume the first product is the most relevant
    marginal_price = float(products[0]["marginal_price"])
    print(f"Marginal price of the most relevant product: {marginal_price}")
    
    # Extract the offered price from the response (assuming format like "[number] ржЯрж╛ржХрж╛")
    match = re.search(r'(\d+\.?\d*)\s*ржЯрж╛ржХрж╛', response)
    if match:
        offered_price = float(match.group(1))
        if offered_price < marginal_price:
            # Replace the offered price with the marginal price
            response = re.sub(r'\d+\.?\d*\s*ржЯрж╛ржХрж╛', f"{int(marginal_price)} ржЯрж╛ржХрж╛", response)
    
    return response

def add_to_google_sheet(phone_number: str):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = Credentials.from_service_account_file("google_sheet.json", scopes=scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key("1eEuya073QSg0iXsued7e1xJbcrRdKuD7UH7JsyQLvS0").sheet1
        
        today_date = datetime.now().strftime("%Y-%m-%d")
        sheet.insert_row([phone_number, today_date], index=2) # index=2 to insert at the top after header
        print(f"Successfully added {phone_number} to Google Sheet.")
    except Exception as e:
        print(f"Error adding to Google Sheet: {e}")

@router.post("/api/chat")
async def chat(
    images: Optional[List[UploadFile]] = File(None),
    text: Optional[str] = Form(None),
    session_id: Optional[str] = Form(None)
):
    if not images and not text:
        return JSONResponse(status_code=400, content={"error": "At least one image or text input is required"})
    
    session_id = session_id or str(uuid4())
    session_data = session_memories[session_id]
    memory = session_data["memory"]
    retrieved_products = session_data["last_products"]
    session_data["message_count"] += 1  # Increment message count

    # Image search
    if images:
        retrieved_products = []
        image_index = model_manager.get_image_index()
        image_metadata = model_manager.get_image_metadata()
        
        if image_index is None or not image_metadata:
            return JSONResponse(status_code=500, content={"error": "Image search not available"})
            
        for image_file in images:
            image = Image.open(image_file.file)
            image_embedding = model_manager.get_image_embedding(image)
            D, I = image_index.search(np.array([image_embedding]).astype('float32'), k=1)
            retrieved_products.append(image_metadata[I[0][0]])
        session_data["last_products"] = retrieved_products

    # Text search
    if text:
        text_vector_store = model_manager.get_text_vector_store()
        if text_vector_store is None:
            return JSONResponse(status_code=500, content={"error": "Text search not available"})
            
        docs = text_vector_store.similarity_search(text, k=1)
        for doc in docs:
            retrieved_products.append(doc.metadata)
        session_data["last_products"] = retrieved_products

    # Remove duplicates
    seen_products = set()
    unique_products = []
    for product in retrieved_products:
        identifier = (product.get('name', '').strip(), product.get('code', '').strip())
        if identifier not in seen_products:
            seen_products.add(identifier)
            unique_products.append(product)
    retrieved_products = unique_products

    # Build context
    context = "\nAvailable products:\n"
    for product in retrieved_products:
        context += f"- Name: {product['name']}, Price: {product['price']},Description: {product['description']} Link: {product['link']}\n"

    # Define query
    user_query = text.strip() if text else "ржЖржкрж▓рзЛржб ржХрж░рж╛ ржкржгрзНржпржЧрзБрж▓рзЛрж░ ржирж╛ржо ржПржмржВ ржорзВрж▓рзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред"

    # Check for phone number and save to Google Sheet
    phone_pattern = r'(?:\d{8,11}|[рзж-рзп]{8,11})'
    match = re.search(phone_pattern, user_query)
    if match:
        phone_number = match.group(0)
        add_to_google_sheet(phone_number)

    # Check if user wants to order and if product has size variants
    if any(k in user_query.lower() for k in ["order", "ржЕрж░рзНржбрж╛рж░", "kina", "ржХрж┐ржирж╛", "korte chai", "ржХрж░рждрзЗ ржЪрж╛ржЗ"]):
        # Check if any product has size information in description
        has_size_variants = False
        size_products = []
        for product in retrieved_products:
            description = product.get('description', '').lower()
            # Check for shoe-specific patterns: "рж╕рж╛ржЗржЬ=" followed by numbers (shoe sizes)
            # vs bag patterns: "рж╕рж╛ржЗржЬ=" followed by measurements (cm/inches)
            if 'рж╕рж╛ржЗржЬ=' in description:
                # Check if it's shoe sizes (numbers like 36,37,38,39,40) vs measurements (cm, inches)
                # Look for shoe size pattern: рж╕рж╛ржЗржЬ= followed by numbers separated by commas
                shoe_size_pattern = r'рж╕рж╛ржЗржЬ\s*=\s*рж╕рж╛ржЗржЬ\s*=\s*\d+(?:,\d+)*'
                # Look for measurement pattern: contains cm, inch, рж╕рзЗржорж┐, ржЗржЮрзНржЪрж┐
                measurement_pattern = r'(рж╕рзЗржорж┐|ржЗржЮрзНржЪрж┐|cm|inch|length|width|height)'
                
                if re.search(shoe_size_pattern, description) and not re.search(measurement_pattern, description):
                    has_size_variants = True
                    size_products.append(product)
                # Also check for explicit shoe keywords as backup
                elif any(shoe_word in description for shoe_word in ['ржЬрзБрждрж╛', 'shoe', 'juta']):
                    has_size_variants = True
                    size_products.append(product)
        
        if has_size_variants:
            bot_response = "ржЖржкржирж┐ ржХрзЛржи рж╕рж╛ржЗржЬрзЗрж░ ржЬрзБрждрж╛ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржЪрзНржЫрзЗржи? ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ рж╕рж╛ржЗржЬ ржЬрж╛ржирж┐ржпрж╝рзЗ ржжрж┐ржиред"
        else:
            # Regular order confirmation
            bot_response = "ЁЯУж ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо ржХрж░рждрзЗ ржжржпрж╝рж╛ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ рждржерзНржп ржжрж┐ржи:\nЁЯСд ржирж╛ржо\nЁЯПа ржарж┐ржХрж╛ржирж╛\nЁЯУ▒ ржорзЛржмрж╛ржЗрж▓ ржирж╛ржорзНржмрж╛рж░\nЁЯТ░ ржХрзЛржирзЛ ржЕржЧрзНрж░рж┐ржо ржкрзЗржорзЗржирзНржЯ ржирзЗржЗ! ржкржгрзНржп рж╣рж╛рждрзЗ ржкрзЗржпрж╝рзЗ ржЪрзЗржХ ржХрж░рзЗ ржХрзНржпрж╛рж╢ ржЕржи ржбрзЗрж▓рж┐ржнрж╛рж░рж┐рждрзЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рзБржиред\nржЕрж░рзНржбрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ WhatsApp-ржП ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: https://wa.me/8801942550295"
    elif any(k in user_query.lower() for k in ["hubohu", "exactly like", "same as picture", "ржЫржмрж┐рж░ ржоржд", "рж╣рзБржмрж╣рзБ"]):
        bot_response = "рж╣рзНржпрж╛ржБ, ржкржгрзНржп ржПржХржжржо рж╣рзБржмрж╣рзБ ржЫржмрж┐рж░ ржорждрзЛ рж╣ржмрзЗ! ржЖржорж░рж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рж┐ ржпрзЗ ржЖржкржирж┐ ржЫржмрж┐рждрзЗ ржпрж╛ ржжрзЗржЦржЫрзЗржи, ржарж┐ржХ рждрзЗржоржиржЯрж╛ржЗ ржкрж╛ржмрзЗржиред"
    elif not retrieved_products and any(k in user_query.lower() for k in ["pp", "price", "ржкрзНрж░рж╛ржЗржЬ", "ржжрж╛ржо"]):
        bot_response = "ржпрзЗржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржЯрж┐рж░ ржжрж╛ржо рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржЪрзНржЫрзЗржи рждрж╛рж░ ржЫржмрж┐ ржЕржержмрж╛ ржХрзЛржб ржЯрж┐ ржжрж┐ржи"
    else:
        llm = model_manager.get_llm()
        chain = RunnableSequence(prompt | llm)
        chat_history = memory.load_memory_variables({})["chat_history"]
        inputs = {"chat_history": chat_history, "user_query": user_query, "context": context}
        print(inputs)
        response = chain.invoke(inputs)
        bot_response = response.content

    # Increment message count in database
    try:
        with db_service.get_cursor() as (cursor, connection):
            cursor.execute("UPDATE business_settings SET value = value + 1 WHERE `key` = 'number_of_message'")
            connection.commit()
    except Exception as e:
        print(f"Error incrementing message count: {e}")

    # Save to memory
    memory.save_context({"user_query": user_query}, {"output": bot_response})

    # Check if message count has reached 15 and clear memory if so
    if session_data["message_count"] >= 15:
        session_memories[session_id] = {
            "memory": ConversationBufferMemory(memory_key="chat_history", return_messages=True),
            "last_products": [],
            "message_count": 0
        }
        print(f"Session memory cleared for session_id: {session_id} after 15 messages")

    return JSONResponse(content={
        "reply": bot_response,
        "related_products": [{k: v for k, v in product.items() if k != "marginal_price"} for product in retrieved_products],
        "session_id": session_id
    })

def send_to_facebook(recipient_id: str, message_text: str = None, image_url: str = None):
    """Send message or image back to user via Facebook Graph API."""
    if image_url:
        payload = {
            "messaging_type": "RESPONSE",
            "recipient": {"id": recipient_id},
            "message": {
                "attachment": {
                    "type": "image",
                    "payload": {
                        "url": image_url,
                        "is_reusable": True
                    }
                }
            }
        }
    else:
        payload = {
            "messaging_type": "RESPONSE",
            "recipient": {"id": recipient_id},
            "message": {"text": message_text}
        }
    
    response = requests.post(
        settings.FB_GRAPH_URL,
        json=payload,
        headers={"Content-Type": "application/json"}
    )
    if response.status_code != 200:
        print(f"Error sending message: {response.text}")
    return response.status_code == 200

@router.get("/webhook")
async def verify_webhook(request: Request):
    mode = request.query_params.get("hub.mode")
    token = request.query_params.get("hub.verify_token")
    challenge = request.query_params.get("hub.challenge")
    
    print(f"VERIFY_TOKEN: {settings.VERIFY_TOKEN}, Received token: {token}")
    if mode == "subscribe" and token == settings.VERIFY_TOKEN:
        return Response(content=str(challenge), status_code=200)
    else:
        raise HTTPException(status_code=403, detail="Forbidden")

@router.post("/webhook")
async def receive_webhook(request: Request):
    data = await request.json()
    if data.get("object") != "page":
        return JSONResponse(status_code=200, content={"status": "ok"})

    for entry in data.get("entry", []):
        messaging = entry.get("messaging", [])
        for message_data in messaging:
            sender_id = message_data["sender"]["id"]
            print("Received message_data:", message_data)
            incoming_msg = message_data["message"].get("text", "")
            files = []

            # Handle multiple image attachments
            attachments = message_data["message"].get("attachments", [])
            if attachments:
                for idx, attachment in enumerate(attachments):
                    if attachment["type"] == "image":
                        image_url = attachment["payload"]["url"]
                        async with httpx.AsyncClient() as client:
                            image_response = await client.get(image_url)
                            if image_response.status_code == 200:
                                image_content = image_response.content
                                files.append(
                                    (
                                        "images",  # must match parameter name in /api/chat
                                        (f"image_{sender_id}_{idx}.jpg", image_content, "image/jpeg")
                                    )
                                )
                            else:
                                print(f"Failed to download image: {image_response.status_code}")
            
            if not incoming_msg and not files:
                send_to_facebook(sender_id, "Please send a text message or an image to search for products.")
                continue

            session_id = sender_id
            async with httpx.AsyncClient() as client:
                print("Sending to /chat:", {"text": incoming_msg, "session_id": session_id, "files_count": len(files)})
                if files:
                    response = await client.post(
                        "https://chat.momsandkidsworld.com/api/chat",
                        data={"text": incoming_msg, "session_id": session_id},
                        files=files,  # тЬЕ Now can send multiple images
                        timeout=30.0
                    )
                else:
                    response = await client.post(
                        "https://chat.momsandkidsworld.com/api/chat",
                        data={"text": incoming_msg, "session_id": session_id},
                        timeout=30.0
                    )

                if response.status_code != 200:
                    print(f"Error from /chat: {response.status_code}, {response.text}")
                    bot_reply = "Sorry, something went wrong."
                else:
                    result = response.json()
                    bot_reply = result["reply"]

            send_to_facebook(sender_id, bot_reply)

    return JSONResponse(status_code=200, content={"status": "ok"})